<prompt> <title>Comprehensive Codebase Review and Documentation Enhancement</title> <description> Analyze the entire codebase—and identify any files or modules with: - Bad coding practices - Unclear or incomplete explanations - LLM-generated notations (e.g. "#fixed", "#existing code") </description> <objectives> <objective> For each file or module, ensure that comments and documentation: <point>Clearly explain what the code does and how it works</point> <point>Describe the module’s purpose and role in the overall project</point> <point>Outline how the module connects to pipeline inputs and outputs (e.g., what files it imports, whether it is user-controlled, what chains it triggers, and which files import from it)</point> <point>Remove any placeholder comments such as "#fixed" or "#existing code" and replace them with meaningful explanations</point> </objective> </objectives> <instructions> <instruction>Go over every file in the attached directory.</instruction> <instruction>Identify and flag instances of bad practices, unclear notation, or leftover LLM-generated comments.</instruction> <instruction>For each file, provide a summary that details: <detail>What the file/module does</detail> <detail>The module’s purpose and how it fits into the pipeline</detail> <detail>The files it imports from and what components it exposes to the rest of the project</detail> <detail>Whether the module is intended for direct user control or automated processes</detail> <detail>Any additional context that would help a developer quickly understand and maintain the code</detail> </instruction> <instruction>Output your findings in structured XML format with clear headings and details for each reviewed file.</instruction> </instructions> <output> <content> Provide Filxed notation across all files </content> </output> </prompt>